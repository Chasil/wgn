<?php
/**
 * This file is part of the AppOfferBundle package.
 *
 */
namespace App\OfferBundle\Entity;

/**
 * Class LocationAutocompleteRepository
 *
 * @author wojciech przygoda
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocationAutocompleteRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Find suggestions
     *
     * @param string $query query
     * @param int $limit limit
     * @return array
     */
    public function findSuggestions($query,$limit=12){
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        //$sqlQuery = "SELECT l.name, MATCH_AGAINST(l.name, :query) AS score, MATCH_AGAINST(l.city, :query) AS cscore  FROM AppOfferBundle:LocationAutocomplete l ORDER BY score DESC, cscore DESC";
//        $sqlQuery = "SELECT l.name,
//        MATCH_AGAINST(l.name, :query) AS s_name,
//        MATCH_AGAINST(l.city, :query) AS s_city,
//        case when l.section = '' then 1 else 0 end AS is_city,
//        MATCH_AGAINST(l.section, :query) AS s_section,
//        MATCH_AGAINST(l.district, :query) AS s_district,
//        MATCH_AGAINST(l.province, :query) AS s_province FROM AppOfferBundle:LocationAutocomplete l
//        WHERE MATCH_AGAINST(l.name, :query) > 0
//        ORDER BY  (l.s_city + l.s_section + l.s_district + l.s_province) DESC, is_city DESC, s_city DESC, s_section DESC, s_district DESC, s_province DESC ";
//        $qb = $em->createQuery($sqlQuery);
//        $qb->setParameter('query',$query.'*');
//        $qb->setMaxResults($limit);
//
//        return $qb->getArrayResult();

//        $sqlQuery = "SELECT name,
//        MATCH(name) AGAINST(:query) AS s_name,
//        MATCH(city) AGAINST(:query) AS s_city,
//        case when section = '' then 1 else 0 end AS is_city,
//        MATCH(section) AGAINST(:query) AS s_section,
//        MATCH(district) AGAINST(:query) AS s_district,
//        MATCH(province) AGAINST(:query) AS s_province FROM location_autocomplete
//        WHERE MATCH(name) AGAINST(:query)
//        ORDER BY  (s_city + s_section + s_district + s_province) DESC, is_city DESC, s_city DESC, s_section DESC, s_district DESC, s_province DESC ";
        $sqlQuery = "SELECT name,
          city,
          section,
          MATCH(name) AGAINST(:query IN BOOLEAN MODE ) AS s_name,
          MATCH(city) AGAINST(:query IN BOOLEAN MODE ) AS s_city,
          MATCH(section) AGAINST(:query IN BOOLEAN MODE ) AS s_section,
          MATCH(district) AGAINST(:query IN BOOLEAN MODE ) AS s_district,
          MATCH(province) AGAINST(:query IN BOOLEAN MODE ) AS s_province,
          MATCH(name) AGAINST(:query) AS s_name2,
          MATCH(city) AGAINST(:query) AS s_city2,
          MATCH(section) AGAINST(:query ) AS s_section2,
          MATCH(district) AGAINST(:query) AS s_district2,
          MATCH(province) AGAINST(:query) AS s_province2,
        
          case when section = '' then 1 else 0 end AS is_city,
          case when section = '' then 0 else 1 end AS is_section,
        (
        MATCH(city) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(section) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(district) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(province) AGAINST(:query IN BOOLEAN MODE ) ) +
                (  case when section = '' then 1 else 0 end ) +
                MATCH(name) AGAINST(:query) +
                MATCH(city) AGAINST(:query) +
                MATCH(section) AGAINST(:query ) +
                MATCH(district) AGAINST(:query) +
                MATCH(province) AGAINST(:query)
          as score
          FROM location_autocomplete
          where MATCH(name) AGAINST(:query IN BOOLEAN MODE )
        ORDER BY  (is_city + is_section) DESC, score DESC";
        $words = explode(' ',$query);
        $stmt = $conn->prepare($sqlQuery);
        $stmt->bindValue('query', '+'. join(' +',$words). '*');
        $stmt->bindValue('limit',$limit);
        $stmt->execute();
        return $stmt->fetchAll();
    }
    /**
     * Find closest location
     *
     * @param string $query query
     * @return LocationAutocomplete
     */
    public function closestLocation($query){
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $sqlQuery = 'SELECT l.id, l.name,l.city,
          l.section,
          l.district,
          l.province,
          l.uniqueKey FROM AppOfferBundle:LocationAutocomplete l';
        $sqlQuery .= ' WHERE translate(l.name) LIKE :query OR l.name LIKE :query';
        $qb = $em->createQuery($sqlQuery);
        $qb->setParameter('query', $query);
        $qb->setMaxResults(1);

        $result = $qb->getOneOrNullResult();

        if($result){
            return $result;
        }
       // $sqlQuery = "SELECT l.name, MATCH_AGAINST(l.name, :query) AS score  FROM AppOfferBundle:LocationAutocomplete l WHERE MATCH_AGAINST(l.name, :query) > 0 ORDER BY score DESC";
//        $sqlQuery = "SELECT name,
//        MATCH(name) AGAINST(:query) AS s_name,
//        MATCH(city) AGAINST(:query) AS s_city,
//        case when section = '' then 1 else 0 end AS is_city,
//        MATCH(section) AGAINST(:query) AS s_section,
//        MATCH(district) AGAINST(:query) AS s_district,
//        MATCH(province) AGAINST(:query) AS s_province FROM location_autocomplete
//        WHERE MATCH(name) AGAINST(:query)
//        ORDER BY  (s_city + s_section + s_district + s_province) DESC, is_city DESC, s_city DESC, s_section DESC, s_district DESC, s_province DESC ";

        $sqlQuery = "SELECT id,name,
          city,
          section,
          district,
          province,
          uniqueKey,
          MATCH(name) AGAINST(:query IN BOOLEAN MODE ) AS s_name,
          MATCH(city) AGAINST(:query IN BOOLEAN MODE ) AS s_city,
          MATCH(section) AGAINST(:query IN BOOLEAN MODE ) AS s_section,
          MATCH(district) AGAINST(:query IN BOOLEAN MODE ) AS s_district,
          MATCH(province) AGAINST(:query IN BOOLEAN MODE ) AS s_province,
          MATCH(name) AGAINST(:query) AS s_name2,
          MATCH(city) AGAINST(:query) AS s_city2,
          MATCH(section) AGAINST(:query ) AS s_section2,
          MATCH(district) AGAINST(:query) AS s_district2,
          MATCH(province) AGAINST(:query) AS s_province2,
        
          case when section = '' then 1 else 0 end AS is_city,
          case when section = '' then 0 else 1 end AS is_section,
        (
        MATCH(city) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(section) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(district) AGAINST(:query IN BOOLEAN MODE ) +
                MATCH(province) AGAINST(:query IN BOOLEAN MODE ) ) +
                (  case when section = '' then 1 else 0 end ) +
                MATCH(name) AGAINST(:query) +
                MATCH(city) AGAINST(:query) +
                MATCH(section) AGAINST(:query ) +
                MATCH(district) AGAINST(:query) +
                MATCH(province) AGAINST(:query)
          as score
          FROM location_autocomplete
          where MATCH(name) AGAINST(:query IN BOOLEAN MODE )
        ORDER BY  (is_city + is_section) DESC, score DESC";
        $words = explode(' ',$query);
        $stmt = $conn->prepare($sqlQuery);
        $stmt->bindValue('query', '+'. join(' +',$words). '*');
        $stmt->bindValue('limit',1);
        $stmt->execute();
        return $stmt->fetch();
    }

    /**
     * Find suggested location
     *
     * @param string $query query
     * @return LocationAutocomplete
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findSuggestedLocation($query){
        $em = $this->getEntityManager();


        $sqlQuery = 'SELECT l.name FROM AppOfferBundle:LocationAutocomplete l';
        $sqlQuery .= ' WHERE translate(l.name) LIKE :query OR l.name LIKE :query';
        $qb = $em->createQuery($sqlQuery);
        $qb->setParameter('query', '%'.$query.'%');
        $qb->setMaxResults(1);

        return $qb->getOneOrNullResult();
    }

}
